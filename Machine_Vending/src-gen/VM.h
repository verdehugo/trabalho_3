/** Generated by itemis CREATE code generator. */

#ifndef VM_H_
#define VM_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the VM state machine.
*/
typedef struct VM VM;

/*!
* Forward declaration of the data structure for the VMIfaceBut interface scope.
*/
typedef struct VMIfaceBut VMIfaceBut;

/*!
* Forward declaration of the data structure for the VMInternal interface scope.
*/
typedef struct VMInternal VMInternal;

#ifdef __cplusplus
}
#endif

#include "../src/sc_types.h"
#include <string.h>

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'VM'.
*/

#ifndef VM_EVENTQUEUE_BUFFERSIZE
#define VM_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef VM_IN_EVENTQUEUE_BUFFERSIZE
#define VM_IN_EVENTQUEUE_BUFFERSIZE VM_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define VM_STATE_COUNT 4

/*! Define dimension of the state configuration vector for orthogonal states. */
#define VM_MAX_ORTHOGONAL_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_VM_MAIN_REGION_IDLE 0
#define SCVI_VM_MAIN_REGION_PRODUCT_BROWSE 0
#define SCVI_VM_MAIN_REGION_PRODUCT_DISPENSE 0
#define SCVI_VM_MAIN_REGION_RETURN_CREDIT 0


/* 
 * Enum of event names in the statechart.
 */
typedef enum  {
	VM_invalid_event = SC_INVALID_EVENT_VALUE,
	VM_but_coin1,
	VM_but_coin2,
	VM_but_browse,
	VM_but_enter
} VMEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	VMEventID name;
} vm_event;

/*
 * Queue that holds the raised events.
 */
typedef struct vm_eventqueue_s {
	vm_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} vm_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	VM_last_state,
	VM_main_region_IDLE,
	VM_main_region_product_browse,
	VM_main_region_product_dispense,
	VM_main_region_return_credit
} VMStates;


/*! Type declaration of the data structure for the VMIfaceBut interface scope. */
struct VMIfaceBut
{
	sc_boolean coin1_raised;
	sc_boolean coin2_raised;
	sc_boolean browse_raised;
	sc_boolean enter_raised;
};



/*! Type declaration of the data structure for the VMInternal interface scope. */
struct VMInternal
{
	sc_integer credit;
	sc_integer product;
	sc_integer price;
};








/*! 
 * Type declaration of the data structure for the VM state machine.
 * This data structure has to be allocated by the client code. 
 */
struct VM
{
	VMStates stateConfVector[VM_MAX_ORTHOGONAL_STATES];
	VMIfaceBut ifaceBut;
	VMInternal internal;
	sc_boolean isExecuting;
	vm_eventqueue in_event_queue;
	vm_event in_buffer[VM_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the VM state machine data structures. Must be called before first usage.*/
extern void vM_init(VM* handle);


/*! Activates the state machine. */
extern void vM_enter(VM* handle);

/*! Deactivates the state machine. */
extern void vM_exit(VM* handle);

/*! 
Can be used by the client code to trigger a run to completion step without raising an event.
*/
extern void vM_trigger_without_event(VM* handle);



/*! Raises the in event 'coin1' that is defined in the interface scope 'but'. */ 
extern void vM_but_raise_coin1(VM* handle);
/*! Raises the in event 'coin2' that is defined in the interface scope 'but'. */ 
extern void vM_but_raise_coin2(VM* handle);
/*! Raises the in event 'browse' that is defined in the interface scope 'but'. */ 
extern void vM_but_raise_browse(VM* handle);
/*! Raises the in event 'enter' that is defined in the interface scope 'but'. */ 
extern void vM_but_raise_enter(VM* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean vM_is_active(const VM* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean vM_is_final(const VM* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean vM_is_state_active(const VM* handle, VMStates state);


#ifdef __cplusplus
}
#endif 

#endif /* VM_H_ */
